//@author: tmp
//@help: Converts a position texture to a binary texture where pixels are white when their neighbour distances are below a threshold
//@tags: texture
//@credits: 

Texture2D texture2d : PREVIOUS;
float2 R:TARGETSIZE;
float threshold = 0.1;

SamplerState linearSampler : IMMUTABLE
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Clamp;
    AddressV = Clamp;
};

struct psInput
{
	float4 p : SV_Position;
	float2 uv : TEXCOORD0;
};


float4 PS(psInput input) : SV_Target
{
	float2 offset = 1/R;
	
	float3 nb00 = texture2d.Sample(linearSampler,input.uv + float2(-offset.x, offset.y)).xyz;
	float3 nb10 = texture2d.Sample(linearSampler,input.uv + float2(0, offset.y)).xyz;
	float3 nb20 = texture2d.Sample(linearSampler,input.uv + float2(offset.x, offset.y)).xyz;
	
	float3 nb01 = texture2d.Sample(linearSampler,input.uv + float2(-offset.x, 0)).xyz;
	float3 nb21 = texture2d.Sample(linearSampler,input.uv + float2(offset.x, 0)).xyz;
	
	float3 nb02 = texture2d.Sample(linearSampler,input.uv + float2(-offset.x, -offset.y)).xyz;
	float3 nb12 = texture2d.Sample(linearSampler,input.uv + float2(0, -offset.y)).xyz;
	float3 nb22 = texture2d.Sample(linearSampler,input.uv + float2(offset.x, -offset.y)).xyz;
	
	float3 pos = texture2d.Sample(linearSampler,input.uv).xyz;
	
	float4 c = float4(0,0,0,0);
	if( !(pos.x == 0 && pos.y == 0 && pos.z == 0)){
		if (
		distance(pos, nb00) < threshold &&
		distance(pos, nb10) < threshold &&
		distance(pos, nb20) < threshold &&
		distance(pos, nb01) < threshold &&
		distance(pos, nb21) < threshold &&
		distance(pos, nb02) < threshold &&
		distance(pos, nb12) < threshold &&
		distance(pos, nb22) < threshold 
		) {
			c = float4(1,1,1,1);
		}
		/*else if(
		(nb00.x == 0 && nb00.y == 0 && nb00.z == 0) ||
		(nb10.x == 0 && nb10.y == 0 && nb10.z == 0) ||
		(nb20.x == 0 && nb20.y == 0 && nb20.z == 0) ||
		(nb01.x == 0 && nb01.y == 0 && nb01.z == 0) ||
		(nb21.x == 0 && nb21.y == 0 && nb21.z == 0) ||
		(nb02.x == 0 && nb02.y == 0 && nb02.z == 0) ||
		(nb12.x == 0 && nb12.y == 0 && nb12.z == 0) ||
		(nb22.x == 0 && nb22.y == 0 && nb22.z == 0)
		){
			c = float4(1,1,1,1);
		}*/
	}
	
	return c;
}

technique10 Process
{
	pass P0 <string format="R8G8B8A8_UNorm";>
	{
		SetPixelShader(CompileShader(ps_4_0,PS()));
	}
}



