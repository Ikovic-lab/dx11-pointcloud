Texture2D tex0: PREVIOUS;
Texture2D tex1 <string uiname="DepthBuffer In";>;

SamplerState s0:IMMUTABLE {Filter=MIN_MAG_MIP_POINT;AddressU=CLAMP;AddressV=CLAMP;};
float2 R:TARGETSIZE;

float4x4 tP <string uiname="Projection";>;
float MinDepth=0;
float MaxDepth=4.5;

float RandomSeed=0;
float RandomStrength = 1;

// custom 1D noise function:
float _dnoise1(float3 u){
	u=dot(u+.2,float3(1,57,21));
	return (u.x*(.1+sin(u.x)));
}
float _dnoise(float2 x,float RandomSeed){
	RandomSeed+=.00001;
	float c={
	_dnoise1(float3((x+RandomSeed*13+41)+11,length(sin((x-59)/151+RandomSeed*float2(11,7))))+.5),
	};
	return frac(c+x.x*2+RandomSeed);
}


#define linstepr(a,b,x) saturate((x-a)/(b-a))
float4 pDEPTHTHRESHOLDKINECT(float4 PosWVP:SV_POSITION,float2 uv:TEXCOORD0):SV_Target{
	float depth = tex1.SampleLevel(s0,uv,0).x;
	
	float c;
	if(depth >= 0.9)
	{
		c = tex0.SampleLevel(s0,uv,0).x;
		return c;
	}
	else
	{
		float rnd0 =_dnoise(PosWVP.xy,RandomSeed);
		float ld = tP._43 / (depth - tP._33);
	
		c = (linstepr(MinDepth, MaxDepth, ld) / 65.535 * MaxDepth) + rnd0 * (RandomStrength/100);
		
		return c;
	}
	
}

technique10 DepthThresholdKinect{
	pass P0 <string format="R16_Unorm";>
	{SetPixelShader(CompileShader(ps_4_0,pDEPTHTHRESHOLDKINECT()));}
}




